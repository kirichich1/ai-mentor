import asyncio
import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from keyboards.inline import get_cancel_keyboard, get_style_keyboard
from prompts import (CHAT_ANALYSIS_PROMPT, FIRST_MESSAGE_PROMPT, CHAT_RESCUE_PROMPT,
                     MESSAGE_INTERPRETATION_PROMPT, STYLE_MESSAGE_PROMPT, STYLE_DESCRIPTIONS)
from utils.ai_api import split_text, get_ai_response
from utils.states import AnalysisStates

router = Router()


@router.callback_query(F.data == "analyze_chat")
async def start_chat_analysis(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AnalysisStates.waiting_for_chat)
    await callback.message.edit_text(
        "–ü—Ä–∏–Ω—è—Ç–æ! –ü—Ä–∏—à–ª–∏ –º–Ω–µ 2-3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–∏ —Ç–≤–æ–∏, –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞). üí¨",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


async def safe_send_message(message: Message, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ Markdown."""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown
        await message.answer(text, parse_mode="Markdown", reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "can't parse entities" in str(e):
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–∑–º–µ—Ç–∫–µ, —É–¥–∞–ª—è–µ–º –≤—Å–µ Markdown-—Ç–µ–≥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
            clean_text = re.sub(r'[*_`]', '', text)  # –£–¥–∞–ª—è–µ–º *, _, `
            clean_text = re.sub(r'```[^`]*```', lambda m: m.group(0).replace('```', ''), clean_text)  # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
            await message.answer(clean_text, reply_markup=reply_markup)
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            raise e


@router.message(AnalysisStates.waiting_for_chat)
async def process_chat(message: Message, state: FSMContext):
    await state.clear()

    thinking_message = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É... üïµÔ∏è‚Äç‚ôÇÔ∏è –î–∞–π –º–Ω–µ –º–∏–Ω—É—Ç–∫—É.")

    user_chat_text = message.text
    prompt = CHAT_ANALYSIS_PROMPT.format(user_chat=user_chat_text)

    ai_response = await get_ai_response(prompt)

    await thinking_message.delete()

    if "–û—à–∏–±–∫–∞" in ai_response:
        await message.answer(
            f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n`{ai_response}`\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
        )
    else:
        chunks = split_text(ai_response)
        for i, chunk in enumerate(chunks):
            if i == len(chunks) - 1:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞–Ω–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await safe_send_message(message, chunk, reply_markup=get_cancel_keyboard())
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
                await safe_send_message(message, chunk)
            await asyncio.sleep(0.5)


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.callback_query(F.data == "generate_first_message")
async def start_first_message_generation(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AnalysisStates.waiting_for_target_profile)
    await callback.message.edit_text(
        "üíå –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –∞–Ω–∫–µ—Ç—É —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å. "
        "–Ø –ø—Ä–∏–¥—É–º–∞—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç—å!",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
@router.message(AnalysisStates.waiting_for_target_profile)
async def generate_first_message(message: Message, state: FSMContext):
    await state.clear()

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    thinking_message = await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è... üíå")

    target_profile = message.text
    prompt = FIRST_MESSAGE_PROMPT.format(target_profile=target_profile)

    # –ó–∞–ø—Ä–æ—Å –∫ API
    ai_response = await get_ai_response(prompt)

    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await thinking_message.delete()

    if "–û—à–∏–±–∫–∞" in ai_response:
        await message.answer(
            f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n`{ai_response}`\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
        )
    else:
        chunks = split_text(ai_response)
        for i, chunk in enumerate(chunks):
            if i == len(chunks) - 1:
                await safe_send_message(message, chunk, reply_markup=get_cancel_keyboard())
            else:
                await safe_send_message(message, chunk)
            await asyncio.sleep(0.5)


@router.callback_query(F.data == "chat_rescue")
async def start_chat_rescue(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AnalysisStates.waiting_for_rescue_chat)
    await callback.message.edit_text(
        "üÜò –ü—Ä–∏—à–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞ (—Ç–≤–æ–∏ –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, 3-5 —Ä–µ–ø–ª–∏–∫). "
        "–Ø –¥–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–∞–∫ —Å–ø–∞—Å—Ç–∏ —Å–∏—Ç—É–∞—Ü–∏—é!",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ä–æ—á–Ω–æ–π —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏
@router.message(AnalysisStates.waiting_for_rescue_chat)
async def process_chat_rescue(message: Message, state: FSMContext):
    await state.clear()
    
    thinking_msg = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∏–∞–ª–æ–≥ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏...")
    chat_history = message.text
    prompt = CHAT_RESCUE_PROMPT.format(chat_history=chat_history)
    
    ai_response = await get_ai_response(prompt)
    await thinking_msg.delete()
    
    if "–û—à–∏–±–∫–∞" in ai_response:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
    else:
        await safe_send_message(message, ai_response, reply_markup=get_cancel_keyboard())


@router.callback_query(F.data == "interpret_message")
async def start_message_interpretation(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AnalysisStates.waiting_for_message_interpretation)
    await callback.message.edit_text(
        "üí¨ –ü—Ä–∏—à–ª–∏ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å. "
        "–Ø —Ä–∞–∑–±–µ—Ä—É —Å–∫—Ä—ã—Ç—ã–µ —Å–º—ã—Å–ª—ã, —ç–º–æ—Ü–∏–∏ –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


@router.message(AnalysisStates.waiting_for_message_interpretation)
async def process_message_interpretation(message: Message, state: FSMContext):
    await state.clear()
    
    thinking_msg = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∫—Ä—ã—Ç—ã–µ —Å–º—ã—Å–ª—ã...")
    user_message = message.text
    prompt = MESSAGE_INTERPRETATION_PROMPT.format(message=user_message)
    
    ai_response = await get_ai_response(prompt)
    await thinking_msg.delete()
    
    if "–û—à–∏–±–∫–∞" in ai_response:
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ?")
    else:
        await safe_send_message(message, ai_response, reply_markup=get_cancel_keyboard())


@router.callback_query(F.data == "generate_style_message")
async def start_style_generation(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AnalysisStates.waiting_for_style_context)
    await callback.message.edit_text(
        "üí¨ –ü—Ä–∏—à–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2-3 —Å–æ–æ–±—â–µ–Ω–∏—è), —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ç–∏–ª–∏ –æ—Ç–≤–µ—Ç–∞.",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


@router.message(AnalysisStates.waiting_for_style_context)
async def process_style_context(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è
    await state.update_data(style_context=message.text)
    await state.set_state(AnalysisStates.waiting_for_style_choice)
    
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è:",
        reply_markup=get_style_keyboard()
    )


@router.callback_query(AnalysisStates.waiting_for_style_choice, F.data.startswith("style_"))
async def generate_style_message(callback: CallbackQuery, state: FSMContext):
    style_key = callback.data.split("_")[1]  # "romance", "flirt", –∏ —Ç.–¥.
    style_name = {
        "romance": "–†–æ–º–∞–Ω—Ç–∏–∫–∞ ‚ù§Ô∏è",
        "flirt": "–§–ª–∏—Ä—Ç üòè",
        "humor": "–Æ–º–æ—Ä üòÑ",
        "tease": "–ò–≥—Ä–æ–≤–æ–π –ø–æ–¥—ä—ë–± üòà",
        "sincere": "–ò—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚ú®",
        "support": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ü§ó"
    }.get(style_key, "–≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–∏–ª—é")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    chat_context = data.get("style_context", "")
    await state.clear()
    
    if not chat_context:
        await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    thinking_msg = await callback.message.answer(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ {style_name}...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ç–∏–ª—è
    style_description = STYLE_DESCRIPTIONS.get(style_key, "")
    prompt = STYLE_MESSAGE_PROMPT.format(
        style=style_name,
        chat_context=chat_context,
        style_description=style_description
    )
    
    ai_response = await get_ai_response(prompt)
    await thinking_msg.delete()
    
    if "–û—à–∏–±–∫–∞" in ai_response or not ai_response.strip():
        await callback.message.answer(
            "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç."
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        chunks = split_text(ai_response)
        for i, chunk in enumerate(chunks):
            if i == len(chunks) - 1:
                await safe_send_message(
                    callback.message, 
                    chunk, 
                    reply_markup=get_cancel_keyboard()
                )
            else:
                await safe_send_message(callback.message, chunk)
            await asyncio.sleep(0.3)
    
    await callback.answer()