import asyncio
import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from keyboards.inline import get_cancel_keyboard
from prompts import CHAT_ANALYSIS_PROMPT, FIRST_MESSAGE_PROMPT
from utils.ai_api import split_text, get_ai_response
from utils.states import AnalysisStates

router = Router()


@router.callback_query(F.data == "analyze_chat")
async def start_chat_analysis(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AnalysisStates.waiting_for_chat)
    await callback.message.edit_text(
        "–ü—Ä–∏–Ω—è—Ç–æ! –ü—Ä–∏—à–ª–∏ –º–Ω–µ 2-3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–∏ —Ç–≤–æ–∏, –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞). üí¨",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


async def safe_send_message(message: Message, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ Markdown."""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown
        await message.answer(text, parse_mode="Markdown", reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "can't parse entities" in str(e):
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–∑–º–µ—Ç–∫–µ, —É–¥–∞–ª—è–µ–º –≤—Å–µ Markdown-—Ç–µ–≥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
            clean_text = re.sub(r'[*_`]', '', text)  # –£–¥–∞–ª—è–µ–º *, _, `
            clean_text = re.sub(r'```[^`]*```', lambda m: m.group(0).replace('```', ''), clean_text)  # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
            await message.answer(clean_text, reply_markup=reply_markup)
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            raise e


@router.message(AnalysisStates.waiting_for_chat)
async def process_chat(message: Message, state: FSMContext):
    await state.clear()

    thinking_message = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É... üïµÔ∏è‚Äç‚ôÇÔ∏è –î–∞–π –º–Ω–µ –º–∏–Ω—É—Ç–∫—É.")

    user_chat_text = message.text
    prompt = CHAT_ANALYSIS_PROMPT.format(user_chat=user_chat_text)

    ai_response = await get_ai_response(prompt)

    await thinking_message.delete()

    if "–û—à–∏–±–∫–∞" in ai_response:
        await message.answer(
            f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n`{ai_response}`\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
        )
    else:
        chunks = split_text(ai_response)
        for i, chunk in enumerate(chunks):
            if i == len(chunks) - 1:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞–Ω–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await safe_send_message(message, chunk, reply_markup=get_cancel_keyboard())
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
                await safe_send_message(message, chunk)
            await asyncio.sleep(0.5)


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.callback_query(F.data == "generate_first_message")
async def start_first_message_generation(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AnalysisStates.waiting_for_target_profile)
    await callback.message.edit_text(
        "üíå –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –∞–Ω–∫–µ—Ç—É —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å. "
        "–Ø –ø—Ä–∏–¥—É–º–∞—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç—å!",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
@router.message(AnalysisStates.waiting_for_target_profile)
async def generate_first_message(message: Message, state: FSMContext):
    await state.clear()

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    thinking_message = await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è... üíå")

    target_profile = message.text
    prompt = FIRST_MESSAGE_PROMPT.format(target_profile=target_profile)

    # –ó–∞–ø—Ä–æ—Å –∫ API
    ai_response = await get_ai_response(prompt)

    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await thinking_message.delete()

    if "–û—à–∏–±–∫–∞" in ai_response:
        await message.answer(
            f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n`{ai_response}`\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
        )
    else:
        chunks = split_text(ai_response)
        for i, chunk in enumerate(chunks):
            if i == len(chunks) - 1:
                await safe_send_message(message, chunk, reply_markup=get_cancel_keyboard())
            else:
                await safe_send_message(message, chunk)
            await asyncio.sleep(0.5)