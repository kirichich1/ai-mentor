import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from keyboards.inline import get_cancel_keyboard, get_sos_options_keyboard
from prompts import SOS_LET_GO_PROMPT
from utils.states import AnalysisStates
from utils.telegram_helpers import safe_send_message
from utils.ai_api import get_ai_response, split_text

router = Router()

@router.callback_query(F.data == "sos_let_go")
async def start_sos_flow(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AnalysisStates.waiting_for_sos_context)
    
    await callback.message.edit_text(
        "üÜò –†–∞—Å—Å–∫–∞–∂–∏ –≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö –æ —Å–∏—Ç—É–∞—Ü–∏–∏:\n"
        "- –ö–∞–∫ –¥–æ–ª–≥–æ –æ–±—â–∞–µ—Ç–µ—Å—å?\n"
        "- –ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞–¥–∏–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ?\n"
        "- –ü–æ—á–µ–º—É —Ö–æ—á–µ—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥?\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.",
        reply_markup=get_sos_options_keyboard()
    )
    await callback.answer()

@router.message(AnalysisStates.waiting_for_sos_context)
async def generate_let_go_options(message: Message, state: FSMContext):
    await state.clear()
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    thinking_msg = await message.answer("–ì–æ—Ç–æ–≤–ª—é –≤–µ–∂–ª–∏–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...")
    
    context = message.text
    prompt = SOS_LET_GO_PROMPT.format(context=context)
    
    ai_response = await get_ai_response(prompt)
    await thinking_msg.delete()
    
    if "–û—à–∏–±–∫–∞" in ai_response:
        await message.answer(
            f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n{ai_response}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –∫–æ—Ä–æ—á–µ."
        )
    else:
        chunks = split_text(ai_response)
        for i, chunk in enumerate(chunks):
            if i == len(chunks) - 1:
                await safe_send_message(
                    message, 
                    chunk + "\n\nüëá –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é:",
                    reply_markup=get_sos_options_keyboard()
                )
            else:
                await safe_send_message(message, chunk)
            await asyncio.sleep(0.3)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
@router.callback_query(F.data.startswith("sos_quick_"))
async def quick_sos_option(callback: CallbackQuery):
    option_type = callback.data.split("_")[-1]
    
    responses = {
        "polite": "üôè –ë—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: \"–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–±—â–µ–Ω–∏–µ! –ü–æ–∫–∞ —á—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤/–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–æ –∂–µ–ª–∞—é —É–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö!\"",
        "direct": "‚úã –ë—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: \"–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –±–µ—Å–µ–¥—É, –Ω–æ —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ–º. –ñ–µ–ª–∞—é –Ω–∞–π—Ç–∏ —Ç–æ–≥–æ, –∫—Ç–æ –æ—Ü–µ–Ω–∏—Ç —Ç–µ–±—è –ø–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É!\"",
        "simple": "üëã –ë—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: \"–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –≤–∏–∂—É —Å–º—ã—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥. –í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!\""
    }
    
    await callback.message.edit_text(
        responses.get(option_type, responses["polite"]),
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()